{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "code",
      "description": "Code injection at run-time."
    },
    {
      "name": "config",
      "description": "Configuration at run-time."
    },
    {
      "name": "status",
      "description": "Status data of the LCP."
    }
  ],
  "paths": {
    "/code": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/code/{id}": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/config": {
      "post": {
        "summary": "Configuration update",
        "description": "Apply configuration changes to the local environment.",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config_Request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration changed correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to configure based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to change one or more configurations.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Status info",
        "description": "Get info about the status of the LCP in the execution environment.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Status set.",
        "description": "Set the last heartbeat.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Heartbeat with CB-Manager correctly executed.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Local Control Plane",
    "version": "1.0.4"
  },
  "swagger": "2.0",
  "definitions": {
    "Code_Request": {
      "type": "object",
      "properties": {
        "code": {
          "type": "array",
          "description": "Code source",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "example": "firewall",
          "description": "Code id."
        }
      },
      "required": [
        "code",
        "id"
      ]
    },
    "Config_Action_Request": {
      "type": "object",
      "properties": {
        "output_format": {
          "type": "string",
          "enum": [
            "plain",
            "lines",
            "json"
          ],
          "example": "lines",
          "description": "Format of the output of the command."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Id of the action."
        },
        "daemon": {
          "type": "boolean",
          "example": true,
          "description": "Execute the command as daemon."
        },
        "args": {
          "type": "string",
          "example": "-al",
          "description": "Single command argument."
        },
        "cmd": {
          "type": "string",
          "description": "Command."
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "Config_Resource_Request": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Resource content."
        },
        "path": {
          "type": "string",
          "example": "firewall.xml",
          "description": "File path"
        },
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Id of the resource."
        }
      },
      "required": [
        "content",
        "id",
        "path"
      ]
    },
    "Config_Parameter_Request": {
      "type": "object",
      "properties": {
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "properties",
            "xml",
            "yaml"
          ],
          "example": "yaml",
          "description": "Scheme."
        },
        "value": {
          "example": "10s",
          "description": "Parameter new value."
        },
        "id": {
          "type": "string",
          "example": "period",
          "description": "Id of the parameter."
        },
        "source": {
          "type": "string",
          "example": "firewall.xml",
          "description": "Source filename."
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "period",
            "description": "Key path."
          }
        }
      },
      "required": [
        "id",
        "schema",
        "source",
        "value"
      ]
    },
    "Config_Request": {
      "type": "object",
      "properties": {
        "actions": {
          "description": "List of actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Action_Request"
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Resource_Request"
          }
        },
        "parameters": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Parameter_Request"
          }
        }
      }
    },
    "Status_Response": {
      "type": "object",
      "properties": {
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        },
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "ID of the execution environment."
        }
      },
      "required": [
        "id",
        "last_heartbeat",
        "started"
      ]
    }
  }
}
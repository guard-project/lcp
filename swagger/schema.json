{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "code",
      "description": "Code injection at run-time."
    },
    {
      "name": "config",
      "description": "Configuration at run-time."
    },
    {
      "name": "status",
      "description": "Status data of the LCP."
    },
    {
      "name": "filiation",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "filiation",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "hardware",
      "description": "Returns description of a Baremetal Server."
    },
    {
      "name": "hardware",
      "description": "Returns description of a Baremetal Server."
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "software",
      "description": "Returns description of a Baremetal Server."
    },
    {
      "name": "hardware",
      "description": "Description of a Cloud Infrastructure"
    },
    {
      "name": "hardware",
      "description": "Returns description of a Baremetal Server."
    }
  ],
  "paths": {
    "/code": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/code/{id}": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/config": {
      "post": {
        "summary": "Configuration update",
        "description": "Apply configuration changes to the local environment.",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config_Request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration changed correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to configure based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to change one or more configurations.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Status info",
        "description": "Get info about the status of the LCP in the execution environment.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Status set.",
        "description": "Set the last heartbeat.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Heartbeat with CB-Manager correctly executed.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/filiation/{id}": {
      "delete": {
        "summary": "Get the \"filiated\" (or legitimated LCP childs) for this Service Chain",
        "description": "Gets a list of next links in the service chain filiated (as son childs) with\nthis Execution Environment.\n",
        "tags": [
          "filiation"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPSonDescription"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Get the \"filiated\" (or legitimated LCP childs) for this Service Chain",
        "description": "Gets a list of next links in the service chain filiated (as son childs) with\nthis Execution Environment.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of LCP son to be queried",
            "required": true
          }
        ],
        "tags": [
          "filiation"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/LCPSonDescription"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/filiation": {
      "get": {
        "summary": "Get the \"filiated\" (or legitimated LCP childs) for this Service Chain",
        "description": "Gets a list of next links in the service chain filiated (as son childs) with\nthis Execution Environment.\n",
        "tags": [
          "filiation"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPSonDescription"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Get the \"filiated\" (or legitimated LCP childs) for this Service Chain",
        "description": "Gets a list of next links in the service chain filiated (as son childs) with\nthis Execution Environment.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPSonDescription"
            }
          }
        ],
        "tags": [
          "filiation"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/baremetal": {
      "get": {
        "summary": "Get the Baremetal server where the LCP is deployed on.",
        "description": "Gets the information of the Server where the LCP is deployed\n",
        "tags": [
          "hardware"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaremetalServer"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "POST the Baremetal server where the LCP is deployed on.",
        "description": "Posts the information of the Server where the LCP is deployed\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaremetalServer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The BaremetalServer has been successfully updated."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/virtualserver": {
      "get": {
        "summary": "Get the Virtual server where the LCP is deployed on.",
        "description": "Gets the information of the Server where the LCP is deployed\n",
        "tags": [
          "hardware"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VirtualServer"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "POST the Baremetal server where the LCP is deployed on.",
        "description": "Posts the information of the Server where the LCP is deployed\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VirtualServer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The VirtualServer has been successfully updated."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/software": {
      "get": {
        "summary": "Get the Software installed and controlled and known by the LCP",
        "description": "Gets the information of the Server software that LCP Knows.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "$ref": "#/definitions/SoftwareDefinition"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Posts the information of some Security Functions that LCP must be aware of.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityFunction"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/securityFunctions": {
      "get": {
        "summary": "Get the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Gets the information of the SecurityFunctions deployed with\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "$ref": "#/definitions/SecurityFunction"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post Software description of a new Software installed in the System",
        "description": "Posts the information of the Server software that LCP must be aware of.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The software definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/cloud": {
      "get": {
        "summary": "Get the Description of one Cloud Infrastructure",
        "description": "Gets the information of one cloud Infrastrucutre\n",
        "tags": [
          "hardware"
        ],
        "responses": {
          "200": {
            "description": "Get the description of a Cloud Infrastructure known by the system",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description of one Cloud Infrastructure",
        "description": "Posts the information of one cloud Infrastrucutre\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The Cloud Infrastructure has been successfully updated"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/deployment": {
      "get": {}
    }
  },
  "info": {
    "title": "Local Control Plane",
    "version": "1.0.3"
  },
  "swagger": "2.0",
  "definitions": {
    "Code_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "firewall",
          "description": "Code id."
        },
        "code": {
          "type": "array",
          "description": "Code source",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "code",
        "id"
      ]
    },
    "Exception_Response": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string",
          "example": "lib/connection.py",
          "description": "Filename where the exception is raised."
        },
        "reason": {
          "type": "string",
          "example": "Connection timeout",
          "description": "Exception reason."
        },
        "line": {
          "type": "integer",
          "example": 80,
          "description": "Line where the exception is raised."
        }
      },
      "required": [
        "filename",
        "line",
        "reason"
      ]
    },
    "No_Content_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "No Content"
        },
        "code": {
          "default": 204
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Bad_Request_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Bad Request"
        },
        "code": {
          "default": 400
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unauthorized_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unauthorized"
        },
        "code": {
          "default": 401
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Acceptable_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Not Acceptable"
        },
        "code": {
          "default": 406
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Ok_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "OK"
        },
        "code": {
          "default": 200
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unsupported_Media_Type_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unsupported Media Type"
        },
        "code": {
          "default": 415
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Internal_Server_Error_Response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Internal Server Error"
        },
        "code": {
          "default": 500
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Config_Action_Request": {
      "type": "object",
      "properties": {
        "args": {
          "type": "string",
          "example": "-al",
          "description": "Single command argument."
        },
        "daemon": {
          "type": "boolean",
          "example": true,
          "description": "Execute the command as daemon."
        },
        "cmd": {
          "type": "string",
          "description": "Command."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Id of the action."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "plain",
            "lines",
            "json"
          ],
          "example": "lines",
          "description": "Format of the output of the command."
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "Config_Parameter_Request": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "example": "firewall.xml",
          "description": "Source filename."
        },
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "properties",
            "xml",
            "yaml"
          ],
          "example": "yaml",
          "description": "Scheme."
        },
        "value": {
          "example": "10s",
          "description": "Parameter new value."
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "period",
            "description": "Key path."
          }
        },
        "id": {
          "type": "string",
          "example": "period",
          "description": "Id of the parameter."
        }
      },
      "required": [
        "id",
        "schema",
        "source",
        "value"
      ]
    },
    "Config_Resource_Request": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "example": "firewall.xml",
          "description": "File path"
        },
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Id of the resource."
        },
        "content": {
          "type": "string",
          "description": "Resource content."
        }
      },
      "required": [
        "content",
        "id",
        "path"
      ]
    },
    "Config_Request": {
      "type": "object",
      "properties": {
        "actions": {
          "description": "List of actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Action_Request"
          }
        },
        "parameters": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Parameter_Request"
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Resource_Request"
          }
        }
      }
    },
    "Status_Response": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "description": "Password for the CB to connect to this LCP."
        },
        "username": {
          "type": "string",
          "description": "Username for the CB to connect to this LCP."
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        },
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "ID of the execution environment."
        }
      },
      "required": [
        "id",
        "last_heartbeat",
        "started"
      ]
    },
    "LCPSonDescription": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://lcpapi.example.com:4000",
          "description": "URL where the Son LCP Listens"
        },
        "id": {
          "type": "string",
          "example": "15d41167-79d3-48bf-b8db-9db0c8cc8d54",
          "description": "Unique ID for the Son LCP"
        },
        "name": {
          "type": "string",
          "example": "lcp:node1",
          "description": "A Human readable name which could be depicted in graphs"
        }
      },
      "required": [
        "id",
        "name",
        "url"
      ]
    },
    "DiskPartition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "ext4",
          "description": "Partition type or Filesystem"
        },
        "size": {
          "type": "number",
          "example": "314461424",
          "description": "Partition Size in Kilo Bytes"
        },
        "name": {
          "type": "string",
          "example": "nveme0n1p6",
          "description": "Partition name in the OS"
        }
      },
      "required": [
        "name",
        "size"
      ]
    },
    "Disk": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "example": "KBG30ZMV512G TOSHIBA",
          "description": "Disk Model/Vendor"
        },
        "name": {
          "type": "string",
          "example": "nvme0n1",
          "description": "Disk Name in the OS"
        },
        "diskPartitions": {
          "type": "array",
          "items": {
            "description": "Disk Partitions for the Disk",
            "allOf": [
              {
                "$ref": "#/definitions/DiskPartition"
              }
            ]
          }
        },
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Disk UUID."
        },
        "size": {
          "type": "integer",
          "example": "314461424",
          "description": "Complete Disk Size in Kilo Bytes"
        }
      },
      "required": [
        "id",
        "name",
        "size"
      ]
    },
    "NetworkInterface": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "example": "UP",
          "description": "Network Interface state in the OS"
        },
        "IPv4Addresses": {
          "type": "array",
          "description": "List of CIDR for IPv4 values",
          "items": {
            "type": "string",
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/(3[0-2]|[0-2][0-9]|[0-9]))?$"
          }
        },
        "name": {
          "type": "string",
          "example": "enx503eaaddcbeb",
          "description": "Network interface Name in the OS"
        },
        "IPv6Addresses": {
          "type": "array",
          "description": "List of CIDR for IPv6 values",
          "items": {
            "type": "string",
            "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/(12[0-8]|1[01][0-9]|[1-9][0-9]|[0-9])$"
          }
        },
        "MacAddress": {
          "type": "string",
          "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
          "example": "a2:bc:14:43:ff:43",
          "description": "Network Interface's Mac Address"
        },
        "id": {
          "type": "string",
          "example": "d450f1ce-95a1-4c3d-9e01-6e37f3d0c584",
          "description": "Network Card UUID."
        },
        "deviceType": {
          "type": "string",
          "example": "ethernet",
          "description": "Type of Network device"
        },
        "mtu": {
          "type": "integer",
          "example": "1500",
          "description": "Network Interface MTU value"
        }
      },
      "required": [
        "id",
        "mtu",
        "name",
        "state"
      ]
    },
    "BaremetalServer": {
      "type": "object",
      "properties": {
        "diskDevices": {
          "type": "array",
          "items": {
            "description": "Disks installed in the Server",
            "allOf": [
              {
                "$ref": "#/definitions/Disk"
              }
            ]
          }
        },
        "networkInterfaces": {
          "type": "array",
          "description": "List of Network Interfaces in the host",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        },
        "operatingSystem": {
          "type": "string",
          "example": "Ubuntu Linux 20.04.2 LTS",
          "description": "Network interface Name in the OS"
        },
        "cpus": {
          "type": "integer",
          "example": "8",
          "description": "CPU Cores in the Server"
        },
        "ram": {
          "type": "integer",
          "example": "8",
          "description": "RAM installed in the Server in Megabytes"
        },
        "hostname": {
          "type": "string",
          "example": "corporario.example.com",
          "description": "Network interface Name in the OS"
        },
        "id": {
          "type": "string",
          "example": "ed5bd35a-7213-47a9-ae6e-76212e62a157",
          "description": "Network Card UUID."
        }
      },
      "required": [
        "cpus",
        "hostname",
        "id",
        "operatingSystem",
        "ram"
      ]
    },
    "VirtualServer": {
      "type": "object",
      "properties": {
        "diskDevices": {
          "type": "array",
          "items": {
            "description": "Disks installed in the Server",
            "allOf": [
              {
                "$ref": "#/definitions/Disk"
              }
            ]
          }
        },
        "networkInterfaces": {
          "type": "array",
          "description": "List of Network Interfaces in the host",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        },
        "hypervisor": {
          "type": "string",
          "example": "KVM",
          "description": "Hypervisor name/technology"
        },
        "operatingSystem": {
          "type": "string",
          "example": "Ubuntu Linux 20.04.2 LTS",
          "description": "Network interface Name in the OS"
        },
        "cpus": {
          "type": "integer",
          "example": "8",
          "description": "CPU Cores in the Server"
        },
        "cloud_id": {
          "type": "string",
          "example": "a4518fe5-9da9-43a5-8bc6-1433e28935f1",
          "description": "Cloud ID -- Maybe None if somehow hosted"
        },
        "ram": {
          "type": "integer",
          "example": "8",
          "description": "RAM installed in the Server in Megabytes"
        },
        "host_id": {
          "type": "string",
          "example": "39f1f5e0-7aaa-4dd7-8e0e-8524cddb7a9c",
          "description": "ID of underlying Baremetal Server"
        },
        "hostname": {
          "type": "string",
          "example": "corporario.example.com",
          "description": "Network interface Name in the OS"
        },
        "id": {
          "type": "string",
          "example": "ed5bd35a-7213-47a9-ae6e-76212e62a157",
          "description": "Network Card UUID."
        }
      },
      "required": [
        "cpus",
        "hostname",
        "hypervisor",
        "id",
        "operatingSystem",
        "ram"
      ]
    },
    "SoftwareDefinition": {
      "type": "object",
      "properties": {
        "openUDPPorts": {
          "type": "array",
          "example": "[33066]",
          "description": "List of opened UDP Ports",
          "items": {
            "type": "integer"
          }
        },
        "openTCPPorts": {
          "type": "array",
          "example": "[3306]",
          "description": "List of opened TCP Ports",
          "items": {
            "type": "integer"
          }
        },
        "vendor": {
          "type": "string",
          "example": "Oracle Coorporation",
          "description": "Name of the Vendor for this software"
        },
        "name": {
          "type": "string",
          "example": "MySQL",
          "description": "Name of this piece of Software instance"
        },
        "version": {
          "type": "string",
          "example": "5.8+1.0.5ubuntu2",
          "description": "Version of the Piece of Software installed"
        },
        "id": {
          "type": "string",
          "example": "a406874b-dea7-4cd1-9d4e-b82a18ec993b",
          "description": "ID of this Software Instance"
        }
      },
      "required": [
        "id",
        "name",
        "version"
      ]
    },
    "AgentParameter": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "30",
          "description": "Value of the Parameter to be configured"
        },
        "type": {
          "type": "string",
          "example": "Int",
          "description": "Type of the Parameter: Int, Number, String..."
        },
        "description": {
          "type": "string",
          "example": "Time between Heartbeats",
          "description": "Some description explaining the parameter"
        },
        "name": {
          "type": "string",
          "example": "HeartbeatTime",
          "description": "Name of the Parameter"
        }
      },
      "required": [
        "name",
        "type",
        "value"
      ]
    },
    "SecurityFunction": {
      "type": "object",
      "properties": {
        "endpoint_url": {
          "type": "string",
          "format": "url",
          "example": "http://example.com:4250/v1/config",
          "description": "URL if some to configure the Parameters."
        },
        "type": {
          "type": "string",
          "example": "PROBE",
          "description": "Type of the Security Function Associated with the LCP"
        },
        "vendor": {
          "type": "string",
          "example": "FIWARE Foundation e.V.",
          "description": "Name of the vendor providing the security Function"
        },
        "parameters": {
          "type": "array",
          "description": "List of configuration parameters used",
          "items": {
            "$ref": "#/definitions/AgentParameter"
          }
        },
        "name": {
          "type": "string",
          "example": "VM Sensor Probe",
          "description": "Name of the Agent Catalog"
        },
        "version": {
          "type": "string",
          "example": "1.0.1",
          "description": "Version of the Security Property associated"
        },
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Security Function ID."
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "vendor",
        "version"
      ]
    },
    "CloudController": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        },
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Controller host"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudCompute": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        },
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Compute host. The controller could act as compute"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudSchema": {
      "type": "object",
      "properties": {
        "vendor": {
          "type": "string",
          "example": "Openstack",
          "description": "Cloud Vendor Name"
        },
        "description": {
          "type": "string",
          "example": "FIWARE Lab Wolfsburg node",
          "description": "Some description of the Cloud"
        },
        "name": {
          "type": "string",
          "example": "Wolfsburg-FIWARE-Lab-Cloud",
          "description": "Human readable Cloud name"
        },
        "controllers": {
          "type": "array",
          "description": "List of Cloud Controllers",
          "items": {
            "$ref": "#/definitions/CloudController"
          }
        },
        "compute_nodes": {
          "type": "array",
          "description": "List of Cloud compute nodes",
          "items": {
            "$ref": "#/definitions/CloudCompute"
          }
        },
        "version": {
          "type": "string",
          "example": "queens",
          "description": "Cloud release code name"
        },
        "id": {
          "type": "string",
          "example": "f9e6ee65-517a-44da-854d-fdd058fcf2dd",
          "description": "Cloud ID"
        }
      },
      "required": [
        "id",
        "name",
        "vendor"
      ]
    }
  }
}
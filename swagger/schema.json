{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "code",
      "description": "Code injection at run-time."
    },
    {
      "name": "config",
      "description": "Configuration at run-time."
    },
    {
      "name": "status",
      "description": "Status data of the LCP."
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "software",
      "description": "Returns the description of software installed in containers"
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "hardware",
      "description": "Description of a Cloud Infrastructure"
    },
    {
      "name": "Agents",
      "description": "Describes the Agent types and Agent instances."
    },
    {
      "name": "Agents",
      "description": "Describes the Agent types and Agent instances."
    },
    {
      "name": "Agents",
      "description": "Describes the Agent types and Agent instances."
    },
    {
      "name": "Agents",
      "description": "Describes the Agent types and Agent instances."
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "self",
      "description": "This method does the initial configuration"
    },
    {
      "name": "self",
      "description": "Returns description of self LCP."
    },
    {
      "name": "self",
      "description": "Initial configuration for the LCP"
    },
    {
      "name": "interacts",
      "description": "Describes interactions with other external resources."
    },
    {
      "name": "interacts",
      "description": "Describes interactions with other external resources."
    },
    {
      "name": "cb integration",
      "description": "Retrieves data from LCP to the Context Broker"
    }
  ],
  "paths": {
    "/code": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/code/{id}": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/config": {
      "post": {
        "summary": "Configuration update",
        "description": "Apply configuration changes to the local environment.",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config_Request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration changed correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to configure based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to change one or more configurations.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Status info",
        "description": "Get info about the status of the LCP in the execution environment.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Status set.",
        "description": "Set the last heartbeat.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Heartbeat with CB-Manager correctly executed.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/software": {
      "get": {
        "summary": "Get the Software known by this LCP to be installed together with this LCP",
        "description": "Gets the information of the software that this LCP Knows. This data about software could be used\nby an external process to query the CVE database in search for known vulnerabilities after being\nretrieved.\n\nIf no software is known by the LCP it would retrieve an empty array.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Posts the information of the Server software that LCP Knows. This data about software could be used\nby an external process to query the CVE database in search for known vulnerabilities after being\nretrieved from the LCP.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/software/{id}": {
      "delete": {
        "summary": "Get the Software known by this LCP to be installed together with this LCP",
        "description": "Gets the information of the software that this LCP Knows. This data about software could be used\nby an external process to query the CVE database in search for known vulnerabilities after being\nretrieved.\n\nIf no software is known by the LCP it would retrieve an empty array.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Get the Software known by this LCP to be installed together with this LCP",
        "description": "Gets the information of the software that this LCP Knows. This data about software could be used\nby an external process to query the CVE database in search for known vulnerabilities after being\nretrieved.\n\nIf no software is known by the LCP it would retrieve an empty array.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "Post the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Posts the information of the Server software that LCP Knows. This data about software could be used\nby an external process to query the CVE database in search for known vulnerabilities after being\nretrieved from the LCP.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/container": {
      "get": {
        "summary": "Get Description of a container running with the LCP",
        "description": "Gets the information of a container (Docker, LXC, etc) running with the LCP and the information of\nthe software that the container is running. This information could help to depict the deployment in\nthe node and the Software information could be useful to query the CVE dtabase in search for known\nvulnerabilities.\n\nIf no container is known by the LCP it would retrieve an empty array.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the containers and their software running with the LCP",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerSchema"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the description of a container and the software installed inside it.",
        "description": "Posts the information of a container (Docker, LXC, etc) running with the LCP and the information of\nthe software that the container is running. This information could help to depict the deployment in\nthe node and the Software information could be useful to query the CVE dtabase in search for known\nvulnerabilities.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContainerSchema"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_son/{id}": {
      "delete": {
        "summary": "Removes an LCP Son given its ID",
        "description": "Removes one Son of the queried LCP given its ID.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of LCP son to be queried",
            "required": true
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Get a LCP Son given its ID",
        "description": "Gets one Son of the queried LCP given its ID.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of LCP son to be queried",
            "required": true
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_son": {
      "get": {
        "summary": "Get the LCP Sons (next LCPs in Service Chain) of this LCP",
        "description": "Gets a list of next links in the service chain (LCP sons) to a given execution environment.\nFollowing the LCP Sons the service chain can be quite accurately be depicted.\n",
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "List of LCP Sons of the queried LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPDescription"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Add a new LCP Son to a given LCP, so a service chain can be depicted.",
        "description": "Post a new LCP Son to a given LCP. Once the LCP knows a new children it could post an\n/lcp_parent operation to the children LCP so the children LCP can know which is its\nparent LCP and get data to connect the Context Broker.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_parent": {
      "delete": {
        "summary": "Removes the LCP Parent of this LCP.",
        "description": "Removes the LCP Parent of this LCP\n",
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "202": {
            "description": "Accepted for deletion"
          },
          "404": {
            "description": "No parent found."
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Get the LCP parent of a LCP",
        "description": "Gets a list of previous links in the service chain (LCP parents) to a given execution environment.\n",
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "List of LCP Sons of the queried LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPFatherConnection"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Add the LCP parent to a given LCP. Once the LCP Son knows its parent, it can connect it so it can get the Context Broker connection data.",
        "description": "A LCP presents itself as the parent to another LCP. Once the LCP knows its parent, it can\nregister itself using /lcp_son POST to the parent LCP, and getting back the Context Broker\nconnection data.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPFatherConnection"
            }
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/cloud": {
      "get": {
        "summary": "Get the Description of the Cloud Infrastructure",
        "description": "Gets the information of the cloud Infrastructure where the LCP is installed on. This description of\nthe cloud infrastructure could define as inner objects also things like:\n* Controllers - Used to control the cloud infrastrucutre\n* Compute Nodes - Used to control the Virtual Servers\n\nAlthough this information will only be informative, not specially relevant.\n",
        "tags": [
          "hardware"
        ],
        "responses": {
          "200": {
            "description": "Get the description of the Cloud Infrastructure known by the system",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description of the Cloud Infrastructure where the LCP is installed on.",
        "description": "Posts the information of the cloud Infrastrucutre where the LCP is installed on.\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The Cloud Infrastructure has been successfully updated"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/agent/instance": {
      "get": {
        "summary": "Get the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Gets the information of the SecurityFunctions deployed along with the LCP\n",
        "tags": [
          "Agents"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "$ref": "#/definitions/Agent"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the description of an instance of an Agent type previously defined.",
        "description": "Post the description of an instance known its Agent type.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent"
              }
            }
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "201": {
            "description": "The Agent Instance has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "404": {
            "description": "Agent type not previously defined. The agent type should be defined before the Instance.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/agent/type": {
      "get": {
        "summary": "Get data relative to the Security Agents defined to be used this LCP",
        "description": "Gets the information of the Agent Types known by this LCP and the data got.\n",
        "tags": [
          "Agents"
        ],
        "responses": {
          "200": {
            "description": "Data relative to the Agents known by this LCP agent",
            "schema": {
              "$ref": "#/definitions/AgentType"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post an Agent type",
        "description": "Posts the information of an Agent Type that so that an agent can register later to belong this kind\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentType"
              }
            }
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "201": {
            "description": "The software definition has been successfully updated there."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/agent/instance/{id}": {
      "delete": {
        "summary": "Remove the description of an Agent Instance deployed with LCP",
        "description": "Remove the description of a Security Agent Instance deployed with LCP.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of Agent Instance to be deleted",
            "required": true
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "204": {
            "description": "Removed successfuly."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "Agent Instance not found."
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "Puts the description of an instance of an Agent instance previously defined.",
        "description": "Updates the description of an instance known and previously defined.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of Agent Instance to be updated",
            "required": true
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Agent"
              }
            }
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "201": {
            "description": "The Agent Instance has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "404": {
            "description": "Agent instance not previously defined. Use POST method instead.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/agent/type/{id}": {
      "delete": {
        "summary": "Deletes an Agent type.",
        "description": "Deletes an agent type so it can not be used anymore to deploy Agent Instances. If there are known agent instances of this type, it will fail to delete the type. Instances should be deleted first.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of Agent type to be modified",
            "required": true
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "204": {
            "description": "The Agent Type has been successfully deleted."
          },
          "404": {
            "description": "The Agent Type was not found. No deletions performed."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed."
          },
          "412": {
            "description": "Precondition failed. There are instances of one type yet, they must be deleted first"
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      },
      "put": {
        "summary": "Put an Agent type",
        "description": "Updates the information about an Agent Type that so that an agent can register later to belong this kind\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of Agent type to be modified",
            "required": true
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentType"
              }
            }
          }
        ],
        "tags": [
          "Agents"
        ],
        "responses": {
          "201": {
            "description": "The Agent Type has been successfully updated there."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/self/deployment": {
      "get": {
        "summary": "Get the execution environment deployment for the LCP",
        "description": "Gets the information of the Server where the LCP is deployed.\n",
        "tags": [
          "self"
        ],
        "responses": {
          "200": {
            "description": "Gets the description of the execution environment. The value for the\nenvironment return value could be one of BaremetalServer, LXC Container,\nDocker container, VirtualServer depending on the value for the \"type\"\nof the execution environment.\n",
            "schema": {
              "$ref": "#/definitions/ExecutionEnvironment"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the description of the Deployment for the execution environment overriding that calculated",
        "description": "Post the description of the execution environment. The value for the\nenvironment value could be one of BaremetalServer, LXC Container,\nDocker container, VirtualServer depending on the value for the \"type\"\nof the execution environment.\n",
        "tags": [
          "self"
        ],
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/ExecutionEnvironment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self": {
      "get": {
        "summary": "Getst the initial configuration for the LCP.",
        "description": "Gets the initial configuration for the LCP. This includes information about itself\nlike the execution environment ID (lcp.id), the URL where the LCP can be\ncontacted and a human readable name.\n",
        "tags": [
          "self"
        ],
        "responses": {
          "200": {
            "description": "Gets the LCP basic information.",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/configuration": {
      "post": {
        "summary": "Post initial configuration for the LCP.",
        "description": "Post initial configuration for the LCP. This includes information about itself\nlike the execution environment ID (lcp.id), the URL where the LCP can be\ncontacted and a human readable name.\n\nThis request will trigger a \"self discovery\" of the deployment of the\nexecution environment (baremental, container, vm), network configuration,\ndisks, cpus, ram, etc\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          }
        ],
        "tags": [
          "self"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/interactions": {
      "get": {
        "summary": "Gets the description of the known elements that a host with a LCP is interacting with.",
        "description": "Gets a description of the components known that the host is working with according to a classical client/server\nparadigm. This includes relationship with other components like publish-subscribe, connection to databases,\nexternal storage drives (NFS, iSCSI, Dropbox), etc.\n",
        "tags": [
          "interacts"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "$ref": "#/definitions/InteractsWithSchema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the description of the elements a host with an LCP is interacting with.",
        "description": "Post a description of the components that the host is working with according to a classical client/server\nparadigm. This includes relationship with other components like publish-subscribe, connection to databases,\nexternal storage drives (NFS, iSCSI, Dropbox), etc.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/InteractsWithSchema"
            }
          }
        ],
        "tags": [
          "interacts"
        ],
        "responses": {
          "201": {
            "description": "The external components which our node is interacting with has been successfully updated."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/interactions/{id}": {
      "delete": {
        "summary": "Deletes the description of a known element that a host with a LCP is interacting with.",
        "description": "Deletes a description of the components known that the host was working with according to a classical client/server\nparadigm.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of element to query.",
            "required": true
          }
        ],
        "tags": [
          "interacts"
        ],
        "responses": {
          "204": {
            "description": "The resource has been correctly deleted"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "Id Not Found"
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Gets the description of the known elements that a host with a LCP is interacting with.",
        "description": "Gets a description of the components known that the host is working with according to a classical client/server\nparadigm. This includes relationship with other components like publish-subscribe, connection to databases,\nexternal storage drives (NFS, iSCSI, Dropbox), etc.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of element to query.",
            "required": true
          }
        ],
        "tags": [
          "interacts"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP, but only the required ID.",
            "schema": {
              "$ref": "#/definitions/InteractsWithSchema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "Id Not Found"
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "put": {
        "summary": "Updates the description of a known element that a host with a LCP is interacting with.",
        "description": "UPdates a description of the components known that the host was working with according to a classical client/server\nparadigm.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of element to query.",
            "required": true
          }
        ],
        "tags": [
          "interacts"
        ],
        "responses": {
          "204": {
            "description": "The resource has been correctly updated"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "404": {
            "description": "Id Not Found"
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/poll": {
      "get": {
        "summary": null,
        "description": "Gets all data the LCP has about itself and its environment. Gets all data the LCP has, specially to the Context Broker, so the CB can integrate this data in its knownledge base. The Context Broker will be the one to call this method since there is no pushing information to the CB from the LCP. This is so mainly for security reasons.",
        "tags": [
          "cb integration"
        ],
        "responses": {
          "200": {
            "description": "retrieves all info the LCP has about itself.",
            "schema": {
              "$ref": "#/definitions/PollSchema"
            }
          },
          "404": {
            "description": "Unconfigured LCP. No data to be retrieved this way.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Local Control Plane",
    "version": "1.0.4"
  },
  "swagger": "2.0",
  "definitions": {
    "Code_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "firewall",
          "description": "Code id."
        },
        "code": {
          "type": "array",
          "description": "Code source",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "code",
        "id"
      ]
    },
    "Exception_Response": {
      "type": "object",
      "properties": {
        "line": {
          "type": "integer",
          "example": 80,
          "description": "Line where the exception is raised."
        },
        "filename": {
          "type": "string",
          "example": "lib/connection.py",
          "description": "Filename where the exception is raised."
        },
        "reason": {
          "type": "string",
          "example": "Connection timeout",
          "description": "Exception reason."
        }
      },
      "required": [
        "filename",
        "line",
        "reason"
      ]
    },
    "No_Content_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 204
        },
        "error": {
          "default": false
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "No Content"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Bad_Request_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 400
        },
        "error": {
          "default": true
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "Bad Request"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unauthorized_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 401
        },
        "error": {
          "default": true
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "Unauthorized"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Acceptable_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 406
        },
        "error": {
          "default": true
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "Not Acceptable"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Ok_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 200
        },
        "error": {
          "default": false
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "OK"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unsupported_Media_Type_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 415
        },
        "error": {
          "default": true
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "Unsupported Media Type"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Internal_Server_Error_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 500
        },
        "error": {
          "default": true
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "status": {
          "default": "Internal Server Error"
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Config_Action_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "start",
          "description": "Id of the action."
        },
        "daemon": {
          "type": "boolean",
          "example": true,
          "description": "Execute the command as daemon."
        },
        "cmd": {
          "type": "string",
          "description": "Command."
        },
        "args": {
          "type": "string",
          "example": "-al",
          "description": "Single command argument."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "plain",
            "lines",
            "json"
          ],
          "example": "lines",
          "description": "Format of the output of the command."
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "Config_Resource_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Id of the resource."
        },
        "content": {
          "type": "string",
          "description": "Resource content."
        },
        "path": {
          "type": "string",
          "example": "firewall.xml",
          "description": "File path"
        }
      },
      "required": [
        "content",
        "id",
        "path"
      ]
    },
    "Config_Parameter_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "period",
          "description": "Id of the parameter."
        },
        "value": {
          "example": "10s",
          "description": "Parameter new value."
        },
        "source": {
          "type": "string",
          "example": "firewall.xml",
          "description": "Source filename."
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "period",
            "description": "Key path."
          }
        },
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "properties",
            "xml",
            "yaml"
          ],
          "example": "yaml",
          "description": "Scheme."
        }
      },
      "required": [
        "id",
        "schema",
        "source",
        "value"
      ]
    },
    "Config_Request": {
      "type": "object",
      "properties": {
        "actions": {
          "description": "List of actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Action_Request"
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Resource_Request"
          }
        },
        "parameters": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Parameter_Request"
          }
        }
      }
    },
    "Status_Response": {
      "type": "object",
      "properties": {
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "ID of the execution environment."
        },
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        }
      },
      "required": [
        "id",
        "last_heartbeat",
        "started"
      ]
    },
    "SoftwareDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "a406874b-dea7-4cd1-9d4e-b82a18ec993b",
          "description": "ID of this Software Instance"
        },
        "type": {
          "type": "string",
          "enum": [
            "SoftwareDefinition"
          ],
          "example": "SoftwareDefinition",
          "description": "Class SoftwareDefinition. The value must be SoftwareDefinition"
        },
        "address": {
          "type": "string",
          "example": "192.168.0.1",
          "description": "Server address or IP where the software is listening"
        },
        "openTCPPorts": {
          "type": "array",
          "example": [
            3306
          ],
          "description": "List of opened TCP Ports",
          "items": {
            "type": "integer"
          }
        },
        "version": {
          "type": "string",
          "example": "5.8.1",
          "description": "Version of the Piece of Software installed"
        },
        "openUDPPorts": {
          "type": "array",
          "example": [
            33066
          ],
          "description": "List of opened UDP Ports",
          "items": {
            "type": "integer"
          }
        },
        "hasSoftwareConnections": {
          "type": "array",
          "example": [],
          "description": "List of Known connected/related Software",
          "items": {
            "type": "string"
          }
        },
        "product": {
          "type": "string",
          "example": "MySQL",
          "description": "Name of this piece of Software instance"
        },
        "vendor": {
          "type": "string",
          "example": "Oracle Coorporation",
          "description": "Name of the Vendor for this software"
        }
      },
      "required": [
        "id",
        "product",
        "type",
        "version"
      ]
    },
    "ContainerSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "413216e3-169f-4638-830e-ef0607732fde",
          "description": "Id of the Container."
        },
        "technology": {
          "type": "string",
          "enum": [
            "lxc",
            "docker",
            "k8s",
            "rkt"
          ],
          "example": "docker",
          "description": "Description of the Container"
        },
        "type": {
          "type": "string",
          "enum": [
            "ContainerDescription"
          ],
          "example": "ContainerDescription",
          "description": "Class SoftwareDefinition. The value must be ContainerDescription"
        },
        "software": {
          "type": "array",
          "description": "Description of the Software contained in the container",
          "items": {
            "$ref": "#/definitions/SoftwareDefinition"
          }
        }
      },
      "required": [
        "id",
        "software",
        "technology",
        "type"
      ]
    },
    "LCPDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "15d41167-79d3-48bf-b8db-9db0c8cc8d54",
          "description": "Unique ID for the Son LCP"
        },
        "type": {
          "type": "string",
          "enum": [
            "LCPDescription"
          ],
          "example": "LCPDescription",
          "description": "FIWARE's type for this class: LCPDescription"
        },
        "exec_env_type": {
          "type": "string",
          "enum": [
            "LCPDescription"
          ],
          "example": "bare-metal",
          "description": "execution environment type"
        },
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://lcpapi.example.com:4000",
          "description": "URL where the Son LCP Listens"
        },
        "name": {
          "type": "string",
          "example": "lcp-example",
          "description": "Name for the LCP in readable human format"
        },
        "description": {
          "type": "string",
          "example": "Testing LCP in localhost",
          "description": "A Human readable description, so it is easy to identify"
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "url"
      ]
    },
    "LCPFatherConnection": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://lcpapi.example.com:4000",
          "description": "URL where the Son LCP Listens"
        }
      },
      "required": [
        "url"
      ]
    },
    "CloudController": {
      "type": "object",
      "properties": {
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Controller host"
        },
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudCompute": {
      "type": "object",
      "properties": {
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Compute host. The controller could act as compute"
        },
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "f9e6ee65-517a-44da-854d-fdd058fcf2dd",
          "description": "Cloud ID"
        },
        "type": {
          "type": "string",
          "enum": [
            "CloudDescription"
          ],
          "example": "CloudDescription",
          "description": "Must be CloudDescription"
        },
        "controllers": {
          "type": "array",
          "description": "List of Cloud Controllers",
          "items": {
            "$ref": "#/definitions/CloudController"
          }
        },
        "name": {
          "type": "string",
          "example": "Wolfsburg-FIWARE-Lab-Cloud",
          "description": "Human readable Cloud name"
        },
        "description": {
          "type": "string",
          "example": "FIWARE Lab Wolfsburg node",
          "description": "Some description of the Cloud"
        },
        "version": {
          "type": "string",
          "example": "queens",
          "description": "Cloud release code name"
        },
        "compute_nodes": {
          "type": "array",
          "description": "List of Cloud compute nodes",
          "items": {
            "$ref": "#/definitions/CloudCompute"
          }
        },
        "vendor": {
          "type": "string",
          "example": "Openstack",
          "description": "Cloud Vendor Name"
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "vendor"
      ]
    },
    "Agent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Security Function ID."
        },
        "type": {
          "type": "string",
          "enum": [
            "AgentInstance"
          ],
          "example": "AgentInstance",
          "description": "Data type AgentInstance. Must be 'AgentInstance'"
        },
        "hasAgentType": {
          "type": "string",
          "example": "PROBE",
          "description": "Id of the Agent Type Associated with this Agent Instance"
        },
        "description": {
          "type": "string",
          "example": "Example agent",
          "description": "Description of the Agent"
        },
        "version": {
          "type": "string",
          "example": "1.0.1",
          "description": "Version of the Security Property associated"
        },
        "endpoint_url": {
          "type": "string",
          "format": "url",
          "example": "http://example.com:4250/v1/config",
          "description": "URL if some to configure the Parameters."
        },
        "partner": {
          "type": "string",
          "example": "Guard Project",
          "description": "Name of the partner/owner of the Agent"
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance if the command is executed correctly."
        },
        "vendor": {
          "type": "string",
          "example": "FIWARE Foundation e.V.",
          "description": "Name of the vendor providing the security Function"
        }
      },
      "required": [
        "hasAgentType",
        "id",
        "status",
        "type"
      ]
    },
    "AgentResource": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "This is the config file for an agent",
          "description": "Description of the Resource"
        },
        "path": {
          "type": "string",
          "example": "/etc/myagent/config.yaml",
          "description": "Path of the Agent config file"
        },
        "example": {
          "type": "string",
          "example": "points to an example config file",
          "description": "Config file example"
        }
      },
      "required": [
        "path"
      ]
    },
    "AgentActionSchema": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "example": "service filebeat start",
          "description": "Action command."
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance according to cmd condition"
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Action name"
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "AgentParameter": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Time between Heartbeats",
          "description": "Some description explaining the parameter"
        },
        "path": {
          "type": "string",
          "example": "HeartbeatTime",
          "description": "Name of the Parameter"
        },
        "type": {
          "type": "string",
          "example": "integer",
          "description": "Type of the Parameter: Int, Number, String..."
        },
        "list": {
          "type": "boolean",
          "example": "true",
          "description": "Marks whether a parameter is list or not"
        }
      },
      "required": [
        "path",
        "type"
      ]
    },
    "AgentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Agent Type ID."
        },
        "resources": {
          "type": "array",
          "description": "List of agents Resources that could be used",
          "items": {
            "$ref": "#/definitions/AgentResource"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "AgentType"
          ],
          "example": "AgentType",
          "description": "Data type AgentType. Must be 'AgentType'"
        },
        "actions": {
          "type": "array",
          "description": "List of actions and expected result fro this agent",
          "items": {
            "$ref": "#/definitions/AgentActionSchema"
          }
        },
        "description": {
          "type": "string",
          "example": "Example agent",
          "description": "Description of the Agent type"
        },
        "source": {
          "type": "string",
          "example": "/etc/example_agent/config.yaml",
          "description": "The config file where parameters are configured"
        },
        "jsonSchema": {
          "type": "string",
          "example": "https://json-schema.org/draft/2020-12/schema",
          "description": "Pointer for the json describing the data from this kind of agents"
        },
        "schema": {
          "type": "string",
          "example": "yaml",
          "description": "Type of configuration file (json, yaml, etc.)"
        },
        "partner": {
          "type": "string",
          "example": "guard-partner",
          "description": "Name of the Partner who created the resource"
        },
        "parameters": {
          "type": "array",
          "description": "List of configuration parameters used",
          "items": {
            "$ref": "#/definitions/AgentParameter"
          }
        }
      },
      "required": [
        "actions",
        "id",
        "partner",
        "schema",
        "source",
        "type"
      ]
    },
    "ExecutionEnvironment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "bc2e2eff-fda1-45be-b7f1-93485b756470",
          "description": "This execution environment ID."
        },
        "executionType": {
          "type": "string",
          "enum": [
            "bare-metal",
            "contailer-lxc",
            "vm",
            "container-k8s",
            "container-docker",
            "cloud",
            "mobile",
            "gateway",
            "application"
          ],
          "example": "bare-metal",
          "description": "Type of Exec. Env. Deployment"
        },
        "type": {
          "type": "string",
          "enum": [
            "ExecutionEnvironment"
          ],
          "example": "ExecutionEnvironment",
          "description": "Class ExecutionEnvironment. The value must be ExecutionEnvironment"
        },
        "environment": {
          "type": "object",
          "description": "Definition of environment hardware. Can be one of the types LXCContainer, DockerContainer, VirtualServer, BaremetalServer"
        }
      },
      "required": [
        "environment",
        "executionType",
        "id",
        "type"
      ]
    },
    "ExternalStorageSchema": {
      "type": "object",
      "properties": {
        "storageType": {
          "type": "string",
          "example": "NFS",
          "enum": [
            "S3",
            "NFS",
            "iSCSI",
            "Swift",
            "CEPH",
            "GlusterFS",
            "SSH-FS"
          ],
          "description": "Type of storage type."
        },
        "id": {
          "type": "string",
          "example": "a406874b-dea7-4cd1-9d4e-b82a18ec993b",
          "description": "ID of this external Storage type"
        },
        "type": {
          "type": "string",
          "enum": [
            "ExternalStorage"
          ],
          "example": "ExternalStorage",
          "description": "Type of the document. It must be External Storage"
        },
        "url": {
          "type": "string",
          "example": "nfs://192.168.10.245:2049/data",
          "description": "URL for this remote resource"
        },
        "description": {
          "type": "string",
          "example": "remote nfs drive",
          "description": "High level description for this remote storage drive"
        }
      },
      "required": [
        "id",
        "storageType",
        "type",
        "url"
      ]
    },
    "InteractsWithSchema": {
      "type": "object",
      "properties": {
        "softwareArtifacts": {
          "type": "array",
          "description": "Software artifacts interacting with this LCP",
          "items": {
            "$ref": "#/definitions/SoftwareDefinition"
          }
        },
        "externalStorage": {
          "type": "array",
          "description": "External storage devices description",
          "items": {
            "$ref": "#/definitions/ExternalStorageSchema"
          }
        }
      }
    },
    "LCPConnectionAsInCB": {
      "type": "object",
      "properties": {
        "sons": {
          "type": "array",
          "example": [
            "lpc:son:id:1",
            "lcp:son:id:2"
          ],
          "items": {
            "type": "string"
          }
        },
        "https": {
          "type": "boolean",
          "example": true,
          "description": "Defines the protocol to connect the LCP. HTTPS if true, HTTP if false"
        },
        "father": {
          "type": "string",
          "example": "0597a13e-9440-4139-a6dd-87eaa9799b55",
          "description": "ID of the LCP father."
        },
        "port": {
          "type": "integer",
          "example": 4000,
          "description": "Port where the LCP is listening"
        }
      },
      "required": [
        "https",
        "port"
      ]
    },
    "LCPContextBrokerDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "15d41167-79d3-48bf-b8db-9db0c8cc8d54",
          "description": "Unique ID for the Son LCP"
        },
        "software": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SoftwareDefinition"
          }
        },
        "environment": {
          "type": "object",
          "description": "Definition of environment hardware. Can be one of the types LXCContainer, DockerContainer, VirtualServer, BaremetalServer"
        },
        "description": {
          "type": "string",
          "example": "Testing LCP in localhost",
          "description": "A Human readable description, so it is easy to identify"
        },
        "type_id": {
          "type": "string",
          "enum": [
            "bare-metal",
            "contailer-lxc",
            "vm",
            "container-k8s",
            "container-docker",
            "cloud",
            "mobile",
            "gateway",
            "application"
          ],
          "example": "bare-metal",
          "description": "Type of execution environment"
        },
        "container": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerSchema"
          }
        },
        "interactions": {
          "$ref": "#/definitions/InteractsWithSchema"
        },
        "hostname": {
          "type": "string",
          "example": "localhost",
          "description": "Hostname of the Host where the LCP can be contacted. If a proxy is behind the LCP, the value should be the proxy host"
        },
        "lcp": {
          "$ref": "#/definitions/LCPConnectionAsInCB"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Describes if the LCP is enabled or not"
        }
      },
      "required": [
        "enabled",
        "hostname",
        "id",
        "lcp",
        "type_id"
      ]
    },
    "PollSchema": {
      "type": "object",
      "properties": {
        "agentInstance": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Agent"
          }
        },
        "exec_env": {
          "description": "LCP Description as required by the CB",
          "allOf": [
            {
              "$ref": "#/definitions/LCPContextBrokerDefinition"
            }
          ]
        },
        "agentType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentType"
          }
        },
        "lcpSons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LCPContextBrokerDefinition"
          }
        }
      },
      "required": [
        "exec_env"
      ]
    }
  }
}
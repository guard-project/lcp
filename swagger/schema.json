{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "code",
      "description": "Code injection at run-time."
    },
    {
      "name": "config",
      "description": "Configuration at run-time."
    },
    {
      "name": "status",
      "description": "Status data of the LCP."
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "software",
      "description": "Returns the description of software installed in containers"
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "lcp_relationships",
      "description": "Describes a \"son\" LCP linked in this service chain."
    },
    {
      "name": "hardware",
      "description": "Description of a Cloud Infrastructure"
    },
    {
      "name": "software",
      "description": "Returns description of a Baremetal Server."
    },
    {
      "name": "software",
      "description": "Sets/Returns description of a type of Agent."
    },
    {
      "name": "software",
      "description": "Returns the description of software installed"
    },
    {
      "name": "self",
      "description": "This method does the initial configuration"
    },
    {
      "name": "hardware",
      "description": "Returns description of a Baremetal Server."
    },
    {
      "name": "self",
      "description": "Initial configuration for the LCP"
    }
  ],
  "paths": {
    "/code": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/code/{id}": {
      "delete": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Code injection",
        "description": "Inject code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "Codes inject correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to inject codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to inject one or more codes.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            },
            "500": {
              "description": "Server not available to satisfy the request.",
              "schema": "Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Update injected code",
        "description": "Update the injected code at run-time in the local environment.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Code_Request"
              }
            }
          }
        ],
        "tags": [
          "code"
        ],
        "responses": {
          "200": {
            "description": "All injected code correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response"
              }
            }
          },
          "204": {
            "description": "No content to update codes based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "304": {
            "description": "Update for one or more codes not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response"
            }
          },
          "422": {
            "description": "Not possible to update one or more codes based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/config": {
      "post": {
        "summary": "Configuration update",
        "description": "Apply configuration changes to the local environment.",
        "tags": [
          "config"
        ],
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config_Request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration changed correctly.",
            "schema": {
              "oneOf": [
                {
                  "type": "array",
                  "items": "Created_Response"
                }
              ]
            }
          },
          "204": {
            "description": "No content to configure based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "422": {
            "description": "Not possible to change one or more configurations.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Status info",
        "description": "Get info about the status of the LCP in the execution environment.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Status set.",
        "description": "Set the last heartbeat.",
        "tags": [
          "status"
        ],
        "responses": {
          "200": {
            "description": "Heartbeat with CB-Manager correctly executed.",
            "schema": {
              "$ref": "#/definitions/Status_Response"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/software": {
      "get": {
        "summary": "Get the Software installed and controlled and known by the LCP",
        "description": "Gets the information of the Server software that LCP Knows.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "$ref": "#/definitions/SoftwareDefinition"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Posts the information of some Security Functions that LCP must be aware of.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityFunction"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self/container": {
      "get": {
        "summary": "Get the Software installed and controlled and known by the LCP",
        "description": "Gets the information of the Server software that LCP Knows.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Description of the Software controlled by the LCP",
            "schema": {
              "$ref": "#/definitions/SoftwareDefinition"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Posts the information of some Security Functions that LCP must be aware of.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityFunction"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The Security Function definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_son/{id}": {
      "delete": {
        "summary": "Removes an LCP Son given its ID",
        "description": "Removes one Son of the queried LCP given its ID.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of LCP son to be queried",
            "required": true
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "get": {
        "summary": "Get a LCP Son given its ID",
        "description": "Gets one Son of the queried LCP given its ID.\n",
        "parameters": [
          {
            "name": "id",
            "requiered": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "id of LCP son to be queried",
            "required": true
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "Status data of the LCP.",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_son": {
      "get": {
        "summary": "Get the LCP Sons of a LCP",
        "description": "Gets a list of next links in the service chain (LCP sons) to a given execution environment.\nFollowing the LCP Sons the service chain can be quite accurately be depicted.\n",
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "List of LCP Sons of the queried LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPDescription"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Add a new LCP Son to a given LCP, so a service chain can be depicted.",
        "description": "Post a new LCP Son to a given LCP. Once the LCP knows a new children it could post an\n/lcp_parent operation to the children LCP so the children LCP can know which is its\nparent LCP and get data to connect the Context Broker.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPDescription"
            }
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/lcp_parent": {
      "get": {
        "summary": "Get the LCP parent of a LCP",
        "description": "Gets a list of previous links in the service chain (LCP parents) to a given execution environment.\n",
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "200": {
            "description": "List of LCP Sons of the queried LCP.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LCPFatherConnection"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Add the LCP parent to a given LCP. Once the LCP Son knows its parent, it can connect it so it can get the Context Broker connection data.",
        "description": "A LCP presents itself as the parent to another LCP. Once the LCP knows its parent, it can\nregister itself using /lcp_son POST to the parent LCP, and getting back the Context Broker\nconnection data.\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/LCPFatherConnection"
            }
          }
        ],
        "tags": [
          "lcp_relationships"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/cloud": {
      "get": {
        "summary": "Get the Description of one Cloud Infrastructure",
        "description": "Gets the information of one cloud Infrastrucutre\n",
        "tags": [
          "hardware"
        ],
        "responses": {
          "200": {
            "description": "Get the description of a Cloud Infrastructure known by the system",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post the Description of one Cloud Infrastructure",
        "description": "Posts the information of one cloud Infrastrucutre\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CloudSchema"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The Cloud Infrastructure has been successfully updated"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/agent/instance": {
      "get": {
        "summary": "Get the Description and configuration parameters of Security Agents deployed with LCP",
        "description": "Gets the information of the SecurityFunctions deployed along with the LCP\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Get the Server's configuration infromation from LCP",
            "schema": {
              "$ref": "#/definitions/SecurityFunction"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post Software description of a new Software installed in the System",
        "description": "Posts the information of the Server software that LCP must be aware of.\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SoftwareDefinition"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The software definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/agent/type": {
      "get": {
        "summary": "Get data relative to the Security Agents defined to be used this LCP",
        "description": "Gets the information of the Agent Types known by this LCP and the data got.\n",
        "tags": [
          "software"
        ],
        "responses": {
          "200": {
            "description": "Data relative to the Agents known by this LCP agent",
            "schema": {
              "$ref": "#/definitions/AgentType"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "Post an Agent type",
        "description": "Posts the information of an Agent Type that so that an agent can register later to belong this kind\n",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentType"
              }
            }
          }
        ],
        "tags": [
          "software"
        ],
        "responses": {
          "201": {
            "description": "The software definition has been successfully updated there."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schem"
            }
          }
        }
      }
    },
    "/self/deployment": {
      "get": {
        "summary": "Get the execution environment deployment for the LCP",
        "description": "Gets the information of the Server where the LCP is deployed.\n",
        "tags": [
          "self"
        ],
        "responses": {
          "200": {
            "description": "Get' the description of the execution environment. The value for the\nenvironment return value could be one of BaremetalServer, LXC Container,\nDocker container, VirtualServer depending on the value for the \"type\"\nof the execution environment.\n",
            "schema": {
              "$ref": "#/definitions/ExecutionEnvironment"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      },
      "post": {
        "summary": "POST the Baremetal server where the LCP is deployed on.",
        "description": "Posts the information of the Server where the LCP is deployed\n",
        "tags": [
          "hardware"
        ],
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/BaremetalServer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The BaremetalServer where LCP is deployed has been successfully updated."
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    },
    "/self": {
      "get": {}
    },
    "/self/configuration": {
      "post": {
        "summary": "Post initial configuration for the LCP.",
        "description": "Post initial configuration for the LCP. This includes information about itself\nlike the execution environment ID (lcp.id), the URL where the LCP can be\ncontacted and a huma readable name.\n\nAnother parameter could be the GUARD's Context Broker data including it's URL\nand it's authorization string.\n\nIt could also recieve a parameter to enable the extra features of LCP which\nwill enable the extra features such as self registering to GUARD's Context\nBroker.\n\nThis request will trigger a \"self discovery\" of the deployment of the\nexecution environment (baremental, container, vm), network configuration,\ndisks, cpus, ram, etc\n",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/InitialConfigurationSchema"
            }
          }
        ],
        "tags": [
          "self"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Local Control Plane",
    "version": "1.0.4"
  },
  "swagger": "2.0",
  "definitions": {
    "Code_Request": {
      "type": "object",
      "properties": {
        "code": {
          "type": "array",
          "description": "Code source",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "example": "firewall",
          "description": "Code id."
        }
      },
      "required": [
        "code",
        "id"
      ]
    },
    "Exception_Response": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "example": "Connection timeout",
          "description": "Exception reason."
        },
        "filename": {
          "type": "string",
          "example": "lib/connection.py",
          "description": "Filename where the exception is raised."
        },
        "line": {
          "type": "integer",
          "example": 80,
          "description": "Line where the exception is raised."
        }
      },
      "required": [
        "filename",
        "line",
        "reason"
      ]
    },
    "No_Content_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 204
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "No Content"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Bad_Request_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 400
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Bad Request"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unauthorized_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 401
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unauthorized"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Not_Acceptable_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 406
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Not Acceptable"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Ok_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 200
        },
        "error": {
          "default": false
        },
        "status": {
          "default": "OK"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Unsupported_Media_Type_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 415
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Unsupported Media Type"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Internal_Server_Error_Response": {
      "type": "object",
      "properties": {
        "code": {
          "default": 500
        },
        "error": {
          "default": true
        },
        "status": {
          "default": "Internal Server Error"
        },
        "message": {
          "type": "string",
          "example": "Request not valid: two ids provided.",
          "description": "Human readable message that describes the status of the operation."
        },
        "exception": {
          "description": "Message of the occurred exception.",
          "allOf": [
            {
              "$ref": "#/definitions/Exception_Response"
            }
          ]
        }
      },
      "required": [
        "message"
      ]
    },
    "Config_Parameter_Request": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "period",
            "description": "Key path."
          }
        },
        "source": {
          "type": "string",
          "example": "firewall.xml",
          "description": "Source filename."
        },
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "properties",
            "xml",
            "yaml"
          ],
          "example": "yaml",
          "description": "Scheme."
        },
        "value": {
          "example": "10s",
          "description": "Parameter new value."
        },
        "id": {
          "type": "string",
          "example": "period",
          "description": "Id of the parameter."
        }
      },
      "required": [
        "id",
        "schema",
        "source",
        "value"
      ]
    },
    "Config_Resource_Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Id of the resource."
        },
        "path": {
          "type": "string",
          "example": "firewall.xml",
          "description": "File path"
        },
        "content": {
          "type": "string",
          "description": "Resource content."
        }
      },
      "required": [
        "content",
        "id",
        "path"
      ]
    },
    "Config_Action_Request": {
      "type": "object",
      "properties": {
        "daemon": {
          "type": "boolean",
          "example": true,
          "description": "Execute the command as daemon."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "plain",
            "lines",
            "json"
          ],
          "example": "lines",
          "description": "Format of the output of the command."
        },
        "cmd": {
          "type": "string",
          "description": "Command."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Id of the action."
        },
        "args": {
          "type": "string",
          "example": "-al",
          "description": "Single command argument."
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "Config_Request": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "List of parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Parameter_Request"
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Resource_Request"
          }
        },
        "actions": {
          "description": "List of actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Config_Action_Request"
          }
        }
      }
    },
    "Status_Response": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "apache",
          "description": "ID of the execution environment."
        },
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started"
        }
      },
      "required": [
        "id",
        "last_heartbeat",
        "started"
      ]
    },
    "SoftwareDefinition": {
      "type": "object",
      "properties": {
        "openUDPPorts": {
          "type": "array",
          "example": "[33066]",
          "description": "List of opened UDP Ports",
          "items": {
            "type": "integer"
          }
        },
        "openTCPPorts": {
          "type": "array",
          "example": "[3306]",
          "description": "List of opened TCP Ports",
          "items": {
            "type": "integer"
          }
        },
        "version": {
          "type": "string",
          "example": "5.8.1",
          "description": "Version of the Piece of Software installed"
        },
        "product": {
          "type": "string",
          "example": "MySQL",
          "description": "Name of this piece of Software instance"
        },
        "id": {
          "type": "string",
          "example": "a406874b-dea7-4cd1-9d4e-b82a18ec993b",
          "description": "ID of this Software Instance"
        },
        "vendor": {
          "type": "string",
          "example": "Oracle Coorporation",
          "description": "Name of the Vendor for this software"
        }
      },
      "required": [
        "id",
        "product",
        "version"
      ]
    },
    "LCPDescription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "15d41167-79d3-48bf-b8db-9db0c8cc8d54",
          "description": "Unique ID for the Son LCP"
        },
        "name": {
          "type": "string",
          "example": "lcp-example",
          "description": "Name for the LCP in readable human format"
        },
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://lcpapi.example.com:4000",
          "description": "URL where the Son LCP Listens"
        },
        "description": {
          "type": "string",
          "example": "Testing LCP in localhost",
          "description": "A Human readable description, so it is easy to identify"
        }
      },
      "required": [
        "id",
        "name",
        "url"
      ]
    },
    "LCPFatherConnection": {
      "type": "object",
      "properties": {
        "authMethod": {
          "type": "string",
          "example": "none",
          "description": "validation Method for this LCP"
        },
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://lcpapi.example.com:4000",
          "description": "URL where the Son LCP Listens"
        }
      },
      "required": [
        "url"
      ]
    },
    "CloudCompute": {
      "type": "object",
      "properties": {
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Compute host. The controller could act as compute"
        },
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudController": {
      "type": "object",
      "properties": {
        "controller_id": {
          "type": "string",
          "example": "3b3041bf-b2fb-47da-8e72-331a67ffd292",
          "description": "ID of the Controller host"
        },
        "type": {
          "type": "string",
          "example": "BaremetalServer",
          "description": "Type of server acting as CloudController"
        }
      },
      "required": [
        "controller_id",
        "type"
      ]
    },
    "CloudSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Wolfsburg-FIWARE-Lab-Cloud",
          "description": "Human readable Cloud name"
        },
        "compute_nodes": {
          "type": "array",
          "description": "List of Cloud compute nodes",
          "items": {
            "$ref": "#/definitions/CloudCompute"
          }
        },
        "controllers": {
          "type": "array",
          "description": "List of Cloud Controllers",
          "items": {
            "$ref": "#/definitions/CloudController"
          }
        },
        "version": {
          "type": "string",
          "example": "queens",
          "description": "Cloud release code name"
        },
        "description": {
          "type": "string",
          "example": "FIWARE Lab Wolfsburg node",
          "description": "Some description of the Cloud"
        },
        "id": {
          "type": "string",
          "example": "f9e6ee65-517a-44da-854d-fdd058fcf2dd",
          "description": "Cloud ID"
        },
        "vendor": {
          "type": "string",
          "example": "Openstack",
          "description": "Cloud Vendor Name"
        }
      },
      "required": [
        "id",
        "name",
        "vendor"
      ]
    },
    "AgentParameter": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Time between Heartbeats",
          "description": "Some description explaining the parameter"
        },
        "path": {
          "type": "string",
          "example": "HeartbeatTime",
          "description": "Name of the Parameter"
        },
        "type": {
          "type": "string",
          "example": "integer",
          "description": "Type of the Parameter: Int, Number, String..."
        },
        "list": {
          "type": "boolean",
          "example": "true",
          "description": "Marks whether a parameter is list or not"
        }
      },
      "required": [
        "path",
        "type"
      ]
    },
    "AgentResource": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "This is the config file for an agent",
          "description": "Description of the Resource"
        },
        "path": {
          "type": "string",
          "example": "/etc/myagent/config.yaml",
          "description": "Path of the Agent config file"
        },
        "example": {
          "type": "string",
          "example": "points to an example config file",
          "description": "Config file example"
        }
      },
      "required": [
        "path"
      ]
    },
    "AgentActionSchema": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "example": "service filebeat start",
          "description": "Action command."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Action name"
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance according to cmd condition"
        }
      },
      "required": [
        "cmd",
        "id"
      ]
    },
    "AgentType": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "description": "List of configuration parameters used",
          "items": {
            "$ref": "#/definitions/AgentParameter"
          }
        },
        "resources": {
          "type": "array",
          "description": "List of agents Resources that could be used",
          "items": {
            "$ref": "#/definitions/AgentResource"
          }
        },
        "source": {
          "type": "string",
          "example": "/etc/example_agent/config.yaml",
          "description": "The config file where parameters are configured"
        },
        "schema": {
          "type": "string",
          "example": "yaml",
          "description": "Type of configuration file (json, yaml, etc.)"
        },
        "partner": {
          "type": "string",
          "example": "guard-partner",
          "description": "Name of the Partner who created the resource"
        },
        "description": {
          "type": "string",
          "example": "Example agent",
          "description": "Description of the Agent type"
        },
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Agent Type ID."
        },
        "actions": {
          "type": "array",
          "description": "List of actions and expected result fro this agent",
          "items": {
            "$ref": "#/definitions/AgentActionSchema"
          }
        }
      },
      "required": [
        "actions",
        "id",
        "partner",
        "schema",
        "source"
      ]
    },
    "ExecutionEnvironment": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "object",
          "description": "Definition of environment hardware. Can be LXCContainer, DockerContainer, VirtualServer, BaremetalServer"
        },
        "type": {
          "type": "string",
          "enum": [
            "bare-metal",
            "contailer-lxc",
            "vm",
            "container-k8s",
            "container-docker",
            "cloud",
            "mobile",
            "gateway",
            "application"
          ],
          "example": "bare-metal",
          "description": "Type of Exec. Env. Deployment"
        }
      },
      "required": [
        "environment",
        "type"
      ]
    },
    "DiskPartition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "nveme0n1p6",
          "description": "Partition name in the OS"
        },
        "type": {
          "type": "string",
          "example": "ext4",
          "description": "Partition type or Filesystem"
        },
        "size": {
          "type": "number",
          "example": "314461424",
          "description": "Partition Size in Kilo Bytes"
        }
      },
      "required": [
        "name",
        "size"
      ]
    },
    "Disk": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "nvme0n1",
          "description": "Disk Name in the OS"
        },
        "model": {
          "type": "string",
          "example": "KBG30ZMV512G TOSHIBA",
          "description": "Disk Model/Vendor"
        },
        "diskPartitions": {
          "type": "array",
          "items": {
            "description": "Disk Partitions for the Disk",
            "allOf": [
              {
                "$ref": "#/definitions/DiskPartition"
              }
            ]
          }
        },
        "id": {
          "type": "string",
          "example": "5db06770-8c64-4693-9724-ff318b02f897",
          "description": "Disk UUID."
        },
        "size": {
          "type": "integer",
          "example": "314461424",
          "description": "Complete Disk Size in Kilo Bytes"
        }
      },
      "required": [
        "id",
        "name",
        "size"
      ]
    },
    "NetworkInterface": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "enx503eaaddcbeb",
          "description": "Network interface Name in the OS"
        },
        "deviceType": {
          "type": "string",
          "example": "ethernet",
          "description": "Type of Network device"
        },
        "IPv6Addresses": {
          "type": "array",
          "description": "List of CIDR for IPv6 values",
          "items": {
            "type": "string",
            "pattern": "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/(12[0-8]|1[01][0-9]|[1-9][0-9]|[0-9])$"
          }
        },
        "mtu": {
          "type": "integer",
          "example": "1500",
          "description": "Network Interface MTU value"
        },
        "MacAddress": {
          "type": "string",
          "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
          "example": "a2:bc:14:43:ff:43",
          "description": "Network Interface's Mac Address"
        },
        "state": {
          "type": "string",
          "example": "UP",
          "description": "Network Interface state in the OS"
        },
        "id": {
          "type": "string",
          "example": "d450f1ce-95a1-4c3d-9e01-6e37f3d0c584",
          "description": "Network Card UUID."
        },
        "IPv4Addresses": {
          "type": "array",
          "description": "List of CIDR for IPv4 values",
          "items": {
            "type": "string",
            "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/(3[0-2]|[0-2][0-9]|[0-9]))?$"
          }
        }
      },
      "required": [
        "id",
        "mtu",
        "name",
        "state"
      ]
    },
    "BaremetalServer": {
      "type": "object",
      "properties": {
        "ram": {
          "type": "integer",
          "example": "8",
          "description": "RAM installed in the Server in Megabytes"
        },
        "diskDevices": {
          "type": "array",
          "items": {
            "description": "Disks installed in the Server",
            "allOf": [
              {
                "$ref": "#/definitions/Disk"
              }
            ]
          }
        },
        "operatingSystem": {
          "type": "string",
          "example": "Ubuntu Linux 20.04.2 LTS",
          "description": "Network interface Name in the OS"
        },
        "id": {
          "type": "string",
          "example": "ed5bd35a-7213-47a9-ae6e-76212e62a157",
          "description": "Network Card UUID."
        },
        "networkInterfaces": {
          "type": "array",
          "description": "List of Network Interfaces in the host",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          }
        },
        "cpus": {
          "type": "integer",
          "example": "8",
          "description": "CPU Cores in the Server"
        },
        "hostname": {
          "type": "string",
          "example": "corporario.example.com",
          "description": "Network interface Name in the OS"
        }
      },
      "required": [
        "cpus",
        "hostname",
        "id",
        "operatingSystem",
        "ram"
      ]
    },
    "ContextBrokerConnection": {
      "type": "object",
      "properties": {
        "auth_header": {
          "type": "string",
          "example": "Basic Z3VhcmQ6cGFzc3dvcmQK"
        },
        "url": {
          "type": "string",
          "format": "url",
          "example": "http://cb.example.com:5000",
          "description": "URL where the ContextBroker Listens"
        }
      },
      "required": [
        "url"
      ]
    },
    "InitialConfigurationSchema": {
      "type": "object",
      "properties": {
        "context_broker": {
          "description": "Connection to Context broker if one required",
          "allOf": [
            {
              "$ref": "#/definitions/ContextBrokerConnection"
            }
          ]
        },
        "lcp": {
          "description": "Initial LCP configuration. Requisite to enable extra_features",
          "allOf": [
            {
              "$ref": "#/definitions/LCPDescription"
            }
          ]
        }
      },
      "required": [
        "lcp"
      ]
    }
  }
}
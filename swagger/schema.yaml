consumes:
- application/json
definitions:
  Agent:
    properties:
      description:
        description: Description of the Agent
        example: Example agent
        type: string
      endpoint_url:
        description: URL if some to configure the Parameters.
        example: http://example.com:4250/v1/config
        format: url
        type: string
      hasAgentType:
        description: Id of the Agent Type Associated with this Agent Instance
        example: PROBE
        type: string
      id:
        description: Security Function ID.
        example: 5db06770-8c64-4693-9724-ff318b02f897
        type: string
      partner:
        description: Name of the partner/owner of the Agent
        example: Guard Project
        type: string
      status:
        description: Update the status the of the agent-instance if the command is
          executed correctly.
        enum: &id001
        - started
        - stopped
        - unknown
        example: started
        type: string
      type:
        description: Data type AgentInstance. Must be 'AgentInstance'
        enum:
        - AgentInstance
        example: AgentInstance
        type: string
      vendor:
        description: Name of the vendor providing the security Function
        example: FIWARE Foundation e.V.
        type: string
      version:
        description: Version of the Security Property associated
        example: 1.0.1
        type: string
    required:
    - hasAgentType
    - id
    - status
    - type
    type: object
  AgentActionSchema:
    properties:
      cmd:
        description: Action command.
        example: service filebeat start
        type: string
      id:
        description: Action name
        example: start
        type: string
      status:
        description: Update the status the of the agent-instance according to cmd
          condition
        enum: *id001
        example: started
        type: string
    required:
    - cmd
    - id
    type: object
  AgentParameter:
    properties:
      description:
        description: Some description explaining the parameter
        example: Time between Heartbeats
        type: string
      list:
        description: Marks whether a parameter is list or not
        example: 'true'
        type: boolean
      path:
        description: Name of the Parameter
        example: HeartbeatTime
        type: string
      type:
        description: 'Type of the Parameter: Int, Number, String...'
        example: integer
        type: string
    required:
    - path
    - type
    type: object
  AgentResource:
    properties:
      description:
        description: Description of the Resource
        example: This is the config file for an agent
        type: string
      example:
        description: Config file example
        example: points to an example config file
        type: string
      path:
        description: Path of the Agent config file
        example: /etc/myagent/config.yaml
        type: string
    required:
    - path
    type: object
  AgentType:
    properties:
      actions:
        description: List of actions and expected result fro this agent
        items:
          $ref: '#/definitions/AgentActionSchema'
        type: array
      description:
        description: Description of the Agent type
        example: Example agent
        type: string
      id:
        description: Agent Type ID.
        example: 5db06770-8c64-4693-9724-ff318b02f897
        type: string
      jsonSchema:
        description: Pointer for the json describing the data from this kind of agents
        example: https://json-schema.org/draft/2020-12/schema
        type: string
      parameters:
        description: List of configuration parameters used
        items:
          $ref: '#/definitions/AgentParameter'
        type: array
      partner:
        description: Name of the Partner who created the resource
        example: guard-partner
        type: string
      resources:
        description: List of agents Resources that could be used
        items:
          $ref: '#/definitions/AgentResource'
        type: array
      schema:
        description: Type of configuration file (json, yaml, etc.)
        example: yaml
        type: string
      source:
        description: The config file where parameters are configured
        example: /etc/example_agent/config.yaml
        type: string
      type:
        description: Data type AgentType. Must be 'AgentType'
        enum:
        - AgentType
        example: AgentType
        type: string
    required:
    - actions
    - id
    - partner
    - schema
    - source
    - type
    type: object
  Bad_Request_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 400
      error:
        default: true
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: Bad Request
    required:
    - message
    type: object
  CloudCompute:
    properties:
      controller_id:
        description: ID of the Compute host. The controller could act as compute
        example: 3b3041bf-b2fb-47da-8e72-331a67ffd292
        type: string
      type:
        description: Type of server acting as CloudController
        example: BaremetalServer
        type: string
    required:
    - controller_id
    - type
    type: object
  CloudController:
    properties:
      controller_id:
        description: ID of the Controller host
        example: 3b3041bf-b2fb-47da-8e72-331a67ffd292
        type: string
      type:
        description: Type of server acting as CloudController
        example: BaremetalServer
        type: string
    required:
    - controller_id
    - type
    type: object
  CloudSchema:
    properties:
      compute_nodes:
        description: List of Cloud compute nodes
        items:
          $ref: '#/definitions/CloudCompute'
        type: array
      controllers:
        description: List of Cloud Controllers
        items:
          $ref: '#/definitions/CloudController'
        type: array
      description:
        description: Some description of the Cloud
        example: FIWARE Lab Wolfsburg node
        type: string
      id:
        description: Cloud ID
        example: f9e6ee65-517a-44da-854d-fdd058fcf2dd
        type: string
      name:
        description: Human readable Cloud name
        example: Wolfsburg-FIWARE-Lab-Cloud
        type: string
      type:
        description: Must be CloudDescription
        enum:
        - CloudDescription
        example: CloudDescription
        type: string
      vendor:
        description: Cloud Vendor Name
        example: Openstack
        type: string
      version:
        description: Cloud release code name
        example: queens
        type: string
    required:
    - id
    - name
    - type
    - vendor
    type: object
  Code_Request:
    properties:
      code:
        description: Code source
        items:
          type: string
        type: array
      id:
        description: Code id.
        example: firewall
        type: string
    required:
    - code
    - id
    type: object
  Config_Action_Request:
    properties:
      args:
        description: Single command argument.
        example: -al
        type: string
      cmd:
        description: Command.
        type: string
      daemon:
        description: Execute the command as daemon.
        example: true
        type: boolean
      id:
        description: Id of the action.
        example: start
        type: string
      output_format:
        description: Format of the output of the command.
        enum:
        - plain
        - lines
        - json
        example: lines
        type: string
    required:
    - cmd
    - id
    type: object
  Config_Parameter_Request:
    properties:
      id:
        description: Id of the parameter.
        example: period
        type: string
      path:
        items:
          description: Key path.
          example: period
          type: string
        type: array
      schema:
        description: Scheme.
        enum:
        - json
        - properties
        - xml
        - yaml
        example: yaml
        type: string
      source:
        description: Source filename.
        example: firewall.xml
        type: string
      value:
        description: Parameter new value.
        example: 10s
    required:
    - id
    - schema
    - source
    - value
    type: object
  Config_Request:
    properties:
      actions:
        description: List of actions.
        items:
          $ref: '#/definitions/Config_Action_Request'
        type: array
      parameters:
        description: List of parameters.
        items:
          $ref: '#/definitions/Config_Parameter_Request'
        type: array
      resources:
        description: List of resources.
        items:
          $ref: '#/definitions/Config_Resource_Request'
        type: array
    type: object
  Config_Resource_Request:
    properties:
      content:
        description: Resource content.
        type: string
      id:
        description: Id of the resource.
        example: filebeat-config
        type: string
      path:
        description: File path
        example: firewall.xml
        type: string
    required:
    - content
    - id
    - path
    type: object
  ContainerSchema:
    properties:
      id:
        description: Id of the Container.
        example: 413216e3-169f-4638-830e-ef0607732fde
        type: string
      software:
        description: Description of the Software contained in the container
        items:
          $ref: '#/definitions/SoftwareDefinition'
        type: array
      technology:
        description: Description of the Container
        enum:
        - lxc
        - docker
        - k8s
        - rkt
        example: docker
        type: string
      type:
        description: Class SoftwareDefinition. The value must be ContainerDescription
        enum:
        - ContainerDescription
        example: ContainerDescription
        type: string
    required:
    - id
    - software
    - technology
    - type
    type: object
  Exception_Response:
    properties:
      filename:
        description: Filename where the exception is raised.
        example: lib/connection.py
        type: string
      line:
        description: Line where the exception is raised.
        example: 80
        type: integer
      reason:
        description: Exception reason.
        example: Connection timeout
        type: string
    required:
    - filename
    - line
    - reason
    type: object
  ExecutionEnvironment:
    properties:
      environment:
        description: Definition of environment hardware. Can be one of the types LXCContainer,
          DockerContainer, VirtualServer, BaremetalServer
        type: object
      executionType:
        description: Type of Exec. Env. Deployment
        enum:
        - bare-metal
        - contailer-lxc
        - vm
        - container-k8s
        - container-docker
        - cloud
        - mobile
        - gateway
        - application
        example: bare-metal
        type: string
      id:
        description: This execution environment ID.
        example: bc2e2eff-fda1-45be-b7f1-93485b756470
        type: string
      type:
        description: Class ExecutionEnvironment. The value must be ExecutionEnvironment
        enum:
        - ExecutionEnvironment
        example: ExecutionEnvironment
        type: string
    required:
    - environment
    - executionType
    - id
    - type
    type: object
  ExternalStorageSchema:
    properties:
      description:
        description: High level description for this remote storage drive
        example: remote nfs drive
        type: string
      id:
        description: ID of this external Storage type
        example: a406874b-dea7-4cd1-9d4e-b82a18ec993b
        type: string
      storageType:
        description: Type of storage type.
        enum:
        - S3
        - NFS
        - iSCSI
        - Swift
        - CEPH
        - GlusterFS
        - SSH-FS
        example: NFS
        type: string
      type:
        description: Type of the document. It must be External Storage
        enum:
        - ExternalStorage
        example: ExternalStorage
        type: string
      url:
        description: URL for this remote resource
        example: nfs://192.168.10.245:2049/data
        type: string
    required:
    - id
    - storageType
    - type
    - url
    type: object
  InteractsWithSchema:
    properties:
      externalStorage:
        description: External storage devices description
        items:
          $ref: '#/definitions/ExternalStorageSchema'
        type: array
      softwareArtifacts:
        description: Software artifacts interacting with this LCP
        items:
          $ref: '#/definitions/SoftwareDefinition'
        type: array
    type: object
  Internal_Server_Error_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 500
      error:
        default: true
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: Internal Server Error
    required:
    - message
    type: object
  LCPDescription:
    properties:
      description:
        description: A Human readable description, so it is easy to identify
        example: Testing LCP in localhost
        type: string
      exec_env_type:
        description: execution environment type
        enum: &id002
        - LCPDescription
        example: bare-metal
        type: string
      id:
        description: Unique ID for the Son LCP
        example: 15d41167-79d3-48bf-b8db-9db0c8cc8d54
        type: string
      name:
        description: Name for the LCP in readable human format
        example: lcp-example
        type: string
      type:
        description: 'FIWARE''s type for this class: LCPDescription'
        enum: *id002
        example: LCPDescription
        type: string
      url:
        description: URL where the Son LCP Listens
        example: http://lcpapi.example.com:4000
        format: url
        type: string
    required:
    - id
    - name
    - type
    - url
    type: object
  LCPFatherConnection:
    properties:
      url:
        description: URL where the Son LCP Listens
        example: http://lcpapi.example.com:4000
        format: url
        type: string
    required:
    - url
    type: object
  No_Content_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 204
      error:
        default: false
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: No Content
    required:
    - message
    type: object
  Not_Acceptable_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 406
      error:
        default: true
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: Not Acceptable
    required:
    - message
    type: object
  Ok_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 200
      error:
        default: false
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: OK
    required:
    - message
    type: object
  SoftwareDefinition:
    properties:
      hasSoftwareConnections:
        description: List of Known connected/related Software
        example: []
        items:
          type: string
        type: array
      id:
        description: ID of this Software Instance
        example: a406874b-dea7-4cd1-9d4e-b82a18ec993b
        type: string
      openTCPPorts:
        description: List of opened TCP Ports
        example: '[3306]'
        items:
          type: integer
        type: array
      openUDPPorts:
        description: List of opened UDP Ports
        example: '[33066]'
        items:
          type: integer
        type: array
      product:
        description: Name of this piece of Software instance
        example: MySQL
        type: string
      type:
        description: Class SoftwareDefinition. The value must be SoftwareDefinition
        enum:
        - SoftwareDefinition
        example: SoftwareDefinition
        type: string
      vendor:
        description: Name of the Vendor for this software
        example: Oracle Coorporation
        type: string
      version:
        description: Version of the Piece of Software installed
        example: 5.8.1
        type: string
    required:
    - id
    - product
    - type
    - version
    type: object
  Status_Response:
    properties:
      id:
        description: ID of the execution environment.
        example: apache
        type: string
      last_heartbeat:
        description: Timestamp of the expiration of the API access configuration.
        example: 2019/02/14 15:23:33
        format: date-time
        type: string
      started:
        description: Timestamp when the LCP is started
        example: 2019/02/14 15:23:30
        format: date-time
        type: string
    required:
    - id
    - last_heartbeat
    - started
    type: object
  Unauthorized_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 401
      error:
        default: true
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: Unauthorized
    required:
    - message
    type: object
  Unsupported_Media_Type_Response:
    properties:
      code:
        default: !!python/object/apply:http.HTTPStatus
        - 415
      error:
        default: true
      exception:
        allOf:
        - $ref: '#/definitions/Exception_Response'
        description: Message of the occurred exception.
      message:
        description: Human readable message that describes the status of the operation.
        example: 'Request not valid: two ids provided.'
        type: string
      status:
        default: Unsupported Media Type
    required:
    - message
    type: object
info:
  title: Local Control Plane
  version: 1.0.4
paths:
  /code:
    delete:
      description: Inject code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: Codes inject correctly.
          schema:
            oneOf:
            - items: Created_Response
              type: array
        '204':
          description: No content to inject codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '422':
          description: Not possible to inject one or more codes.
          schema:
            items:
              oneOf:
              - Created_Response_Schema
              - Unprocessable_Entity_Response_Schema
            type: array
          500:
            description: Server not available to satisfy the request.
            schema: Internal_Server_Error_Response_Schema
      summary: Code injection
      tags:
      - code
    post:
      description: Inject code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: Codes inject correctly.
          schema:
            oneOf:
            - items: Created_Response
              type: array
        '204':
          description: No content to inject codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '422':
          description: Not possible to inject one or more codes.
          schema:
            items:
              oneOf:
              - Created_Response_Schema
              - Unprocessable_Entity_Response_Schema
            type: array
          500:
            description: Server not available to satisfy the request.
            schema: Internal_Server_Error_Response_Schema
      summary: Code injection
      tags:
      - code
    put:
      description: Update the injected code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: All injected code correctly updated.
          schema:
            items:
              $ref: '#/definitions/Ok_Response'
            type: array
        '204':
          description: No content to update codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '304':
          description: Update for one or more codes not necessary.
          schema:
            items:
              oneOf:
              - Ok_Response_Schema
              - Not_Modified_Response
            type: array
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '415':
          description: Media type not supported.
          schema:
            $ref: '#/definitions/Unsupported_Media_Type_Response'
        '422':
          description: Not possible to update one or more codes based on the request.
          schema:
            items:
              oneOf:
              - Ok_Response_Schema
              - Not_Modified_Response
              - Unprocessable_Entity_Response_Schema
            type: array
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Update injected code
      tags:
      - code
  /code/{id}:
    delete:
      description: Inject code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: Codes inject correctly.
          schema:
            oneOf:
            - items: Created_Response
              type: array
        '204':
          description: No content to inject codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '422':
          description: Not possible to inject one or more codes.
          schema:
            items:
              oneOf:
              - Created_Response_Schema
              - Unprocessable_Entity_Response_Schema
            type: array
          500:
            description: Server not available to satisfy the request.
            schema: Internal_Server_Error_Response_Schema
      summary: Code injection
      tags:
      - code
    post:
      description: Inject code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: Codes inject correctly.
          schema:
            oneOf:
            - items: Created_Response
              type: array
        '204':
          description: No content to inject codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '422':
          description: Not possible to inject one or more codes.
          schema:
            items:
              oneOf:
              - Created_Response_Schema
              - Unprocessable_Entity_Response_Schema
            type: array
          500:
            description: Server not available to satisfy the request.
            schema: Internal_Server_Error_Response_Schema
      summary: Code injection
      tags:
      - code
    put:
      description: Update the injected code at run-time in the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Code_Request'
          type: array
      responses:
        '200':
          description: All injected code correctly updated.
          schema:
            items:
              $ref: '#/definitions/Ok_Response'
            type: array
        '204':
          description: No content to update codes based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '304':
          description: Update for one or more codes not necessary.
          schema:
            items:
              oneOf:
              - Ok_Response_Schema
              - Not_Modified_Response
            type: array
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '415':
          description: Media type not supported.
          schema:
            $ref: '#/definitions/Unsupported_Media_Type_Response'
        '422':
          description: Not possible to update one or more codes based on the request.
          schema:
            items:
              oneOf:
              - Ok_Response_Schema
              - Not_Modified_Response
              - Unprocessable_Entity_Response_Schema
            type: array
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Update injected code
      tags:
      - code
  /config:
    post:
      description: Apply configuration changes to the local environment.
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Config_Request'
          type: array
      responses:
        '200':
          description: Configuration changed correctly.
          schema:
            oneOf:
            - items: Created_Response
              type: array
        '204':
          description: No content to configure based on the request.
          schema:
            $ref: '#/definitions/No_Content_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '422':
          description: Not possible to change one or more configurations.
          schema:
            items:
              oneOf:
              - Created_Response_Schema
              - Unprocessable_Entity_Response_Schema
            type: array
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Configuration update
      tags:
      - config
  /status:
    get:
      description: Get info about the status of the LCP in the execution environment.
      responses:
        '200':
          description: Status data of the LCP.
          schema:
            $ref: '#/definitions/Status_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Status info
      tags:
      - status
    post:
      description: Set the last heartbeat.
      responses:
        '200':
          description: Heartbeat with CB-Manager correctly executed.
          schema:
            $ref: '#/definitions/Status_Response'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Status set.
      tags:
      - status
  /self/software:
    get:
      description: 'Gets the information of the software that this LCP Knows. This
        data about software could be used

        by an external process to query the CVE database in search for known vulnerabilities
        after being

        retrieved.


        If no software is known by the LCP it would retrieve an empty array.

        '
      responses:
        '200':
          description: Get the Description of the Software controlled by the LCP
          schema:
            items:
              $ref: '#/definitions/SoftwareDefinition'
            type: array
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the Software known by this LCP to be installed together with this
        LCP
      tags:
      - software
    post:
      description: 'Posts the information of the Server software that LCP Knows. This
        data about software could be used

        by an external process to query the CVE database in search for known vulnerabilities
        after being

        retrieved from the LCP.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/SoftwareDefinition'
          type: array
      responses:
        '201':
          description: The Security Function definition has been successfully updated
            there.
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Post the Description and configuration parameters of Security Agents
        deployed with LCP
      tags:
      - software
  /self/container:
    get:
      description: 'Gets the information of a container (Docker, LXC, etc) running
        with the LCP and the information of

        the software that the container is running. This information could help to
        depict the deployment in

        the node and the Software information could be useful to query the CVE dtabase
        in search for known

        vulnerabilities.


        If no container is known by the LCP it would retrieve an empty array.

        '
      responses:
        '200':
          description: Get the Description of the containers and their software running
            with the LCP
          schema:
            items:
              $ref: '#/definitions/ContainerSchema'
            type: array
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get Description of a container running with the LCP
      tags:
      - software
    post:
      description: 'Posts the information of a container (Docker, LXC, etc) running
        with the LCP and the information of

        the software that the container is running. This information could help to
        depict the deployment in

        the node and the Software information could be useful to query the CVE dtabase
        in search for known

        vulnerabilities.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/ContainerSchema'
          type: array
      responses:
        '201':
          description: The Security Function definition has been successfully updated
            there.
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Post the description of a container and the software installed inside
        it.
      tags:
      - software
  /lcp_son/{id}:
    delete:
      description: 'Removes one Son of the queried LCP given its ID.

        '
      parameters:
      - description: id of LCP son to be queried
        in: path
        name: id
        requiered: true
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Status data of the LCP.
          schema:
            $ref: '#/definitions/LCPDescription'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Removes an LCP Son given its ID
      tags:
      - lcp_relationships
    get:
      description: 'Gets one Son of the queried LCP given its ID.

        '
      parameters:
      - description: id of LCP son to be queried
        in: path
        name: id
        requiered: true
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Status data of the LCP.
          schema:
            $ref: '#/definitions/LCPDescription'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get a LCP Son given its ID
      tags:
      - lcp_relationships
  /lcp_son:
    get:
      description: 'Gets a list of next links in the service chain (LCP sons) to a
        given execution environment.

        Following the LCP Sons the service chain can be quite accurately be depicted.

        '
      responses:
        '200':
          description: List of LCP Sons of the queried LCP.
          schema:
            items:
              $ref: '#/definitions/LCPDescription'
            type: array
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the LCP Sons (next LCPs in Service Chain) of this LCP
      tags:
      - lcp_relationships
    post:
      description: 'Post a new LCP Son to a given LCP. Once the LCP knows a new children
        it could post an

        /lcp_parent operation to the children LCP so the children LCP can know which
        is its

        parent LCP and get data to connect the Context Broker.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LCPDescription'
      responses:
        '201':
          description: Created
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Add a new LCP Son to a given LCP, so a service chain can be depicted.
      tags:
      - lcp_relationships
  /lcp_parent:
    get:
      description: 'Gets a list of previous links in the service chain (LCP parents)
        to a given execution environment.

        '
      responses:
        '200':
          description: List of LCP Sons of the queried LCP.
          schema:
            items:
              $ref: '#/definitions/LCPFatherConnection'
            type: array
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the LCP parent of a LCP
      tags:
      - lcp_relationships
    post:
      description: 'A LCP presents itself as the parent to another LCP. Once the LCP
        knows its parent, it can

        register itself using /lcp_son POST to the parent LCP, and getting back the
        Context Broker

        connection data.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LCPFatherConnection'
      responses:
        '201':
          description: Created
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Add the LCP parent to a given LCP. Once the LCP Son knows its parent,
        it can connect it so it can get the Context Broker connection data.
      tags:
      - lcp_relationships
  /cloud:
    get:
      description: 'Gets the information of the cloud Infrastructure where the LCP
        is installed on. This description of

        the cloud infrastructure could define as inner objects also things like:

        * Controllers - Used to control the cloud infrastrucutre

        * Compute Nodes - Used to control the Virtual Servers


        Although this information will only be informative, not specially relevant.

        '
      responses:
        '200':
          description: Get the description of the Cloud Infrastructure known by the
            system
          schema:
            items:
              $ref: '#/definitions/CloudSchema'
            type: array
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the Description of the Cloud Infrastructure
      tags:
      - hardware
    post:
      description: 'Posts the information of the cloud Infrastrucutre where the LCP
        is installed on.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/CloudSchema'
          type: array
      responses:
        '201':
          description: The Cloud Infrastructure has been successfully updated
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Post the Description of the Cloud Infrastructure where the LCP is installed
        on.
      tags:
      - hardware
  /agent/instance:
    get:
      description: 'Gets the information of the SecurityFunctions deployed along with
        the LCP

        '
      responses:
        '200':
          description: Get the Server's configuration infromation from LCP
          schema:
            $ref: '#/definitions/Agent'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the Description and configuration parameters of Security Agents
        deployed with LCP
      tags:
      - Agents
    post:
      description: 'Post the description of an instance known its Agent type.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/Agent'
          type: array
      responses:
        '201':
          description: The Agent Instance has been successfully updated there.
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '404':
          description: Agent type not previously defined. The agent type should be
            defined before the Instance.
          schema:
            $ref: '#/definitions/Not_Found_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response_Schem'
      summary: Post the description of an instance of an Agent type previously defined.
      tags:
      - Agents
  /agent/type:
    get:
      description: 'Gets the information of the Agent Types known by this LCP and
        the data got.

        '
      responses:
        '200':
          description: Data relative to the Agents known by this LCP agent
          schema:
            $ref: '#/definitions/AgentType'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get data relative to the Security Agents defined to be used this LCP
      tags:
      - Agents
    post:
      description: 'Posts the information of an Agent Type that so that an agent can
        register later to belong this kind

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          items:
            $ref: '#/definitions/AgentType'
          type: array
      responses:
        '201':
          description: The software definition has been successfully updated there.
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response_Schem'
      summary: Post an Agent type
      tags:
      - Agents
  /self/deployment:
    get:
      description: 'Gets the information of the Server where the LCP is deployed.

        '
      responses:
        '200':
          description: 'Get'' the description of the execution environment. The value
            for the

            environment return value could be one of BaremetalServer, LXC Container,

            Docker container, VirtualServer depending on the value for the "type"

            of the execution environment.

            '
          schema:
            $ref: '#/definitions/ExecutionEnvironment'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Get the execution environment deployment for the LCP
      tags:
      - self
    post:
      description: 'Post initial configuration for the LCP. This includes information
        about itself

        like the execution environment ID (lcp.id), the URL where the LCP can be

        contacted and a human readable name.


        Another parameter could be the GUARD''s Context Broker data including it''s
        URL

        and it''s authorization string.


        It could also recieve a parameter to enable the extra features of LCP which

        will enable the extra features such as self registering to GUARD''s Context

        Broker.


        This request will trigger a "self discovery" of the deployment of the

        execution environment (baremental, container, vm), network configuration,

        disks, cpus, ram, etc

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LCPDescription'
      responses:
        '201':
          description: Created
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Post initial configuration for the LCP.
      tags:
      - self
  /self:
    get: {}
  /self/configuration:
    post:
      description: 'Post initial configuration for the LCP. This includes information
        about itself

        like the execution environment ID (lcp.id), the URL where the LCP can be

        contacted and a human readable name.


        Another parameter could be the GUARD''s Context Broker data including it''s
        URL

        and it''s authorization string.


        It could also recieve a parameter to enable the extra features of LCP which

        will enable the extra features such as self registering to GUARD''s Context

        Broker.


        This request will trigger a "self discovery" of the deployment of the

        execution environment (baremental, container, vm), network configuration,

        disks, cpus, ram, etc

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LCPDescription'
      responses:
        '201':
          description: Created
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Post initial configuration for the LCP.
      tags:
      - self
  /interacts:
    get:
      description: 'Gets a description of the components known that the host is working
        with according to a classical client/server

        paradigm. This includes relationship with other components like publish-subscribe,
        connection to databases,

        external storage drives (NFS, iSCSI, Dropbox), etc.

        '
      responses:
        '200':
          description: Get the Server's configuration infromation from LCP
          schema:
            $ref: '#/definitions/InteractsWithSchema'
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response'
      summary: Gets the description of the known elements that a host with a LCP is
        interacting with.
      tags:
      - interacts
    post:
      description: 'Post a description of the components that the host is working
        with according to a classical client/server

        paradigm. This includes relationship with other components like publish-subscribe,
        connection to databases,

        external storage drives (NFS, iSCSI, Dropbox), etc.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/InteractsWithSchema'
      responses:
        '201':
          description: The external components which our node is interacting with
            has been successfully updated.
        '400':
          description: Request not valid.
          schema:
            $ref: '#/definitions/Bad_Request_Response'
        '401':
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Unauthorized_Response'
        '406':
          description: Request validation failed.
          schema:
            $ref: '#/definitions/Not_Acceptable_Response'
        '500':
          description: Server not available to satisfy the request.
          schema:
            $ref: '#/definitions/Internal_Server_Error_Response_Schem'
      summary: Post the description of the elements a host with an LCP is interacting
        with.
      tags:
      - interacts
  /poll:
    get: {}
produces:
- application/json
swagger: '2.0'
tags:
- description: Code injection at run-time.
  name: code
- description: Configuration at run-time.
  name: config
- description: Status data of the LCP.
  name: status
- &id003
  description: Returns the description of software installed
  name: software
- description: Returns the description of software installed in containers
  name: software
- description: Describes a "son" LCP linked in this service chain.
  name: lcp_relationships
- description: Describes a "son" LCP linked in this service chain.
  name: lcp_relationships
- description: Describes a "son" LCP linked in this service chain.
  name: lcp_relationships
- description: Description of a Cloud Infrastructure
  name: hardware
- description: Describes the Agent types and Agent instances.
  name: Agents
- description: Describes the Agent types and Agent instances.
  name: Agents
- *id003
- description: This method does the initial configuration
  name: self
- description: Returns description of a Baremetal Server.
  name: hardware
- description: Initial configuration for the LCP
  name: self
- description: Describes a "son" LCP linked in this service chain.
  name: interacts
- description: Retrieves data from LCP to the Context Broker
  name: cb integration
